http://blog.csdn.net/haiyoung/article/details/52693212

1、接口的默认方法(component.java_se.jdk1_8.new_features_1)
    --Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default关键字即可，这个特征又叫做扩展方法
    --注： 在Java中只有单继承，如果要让一个类赋予新的特性，通常是使用接口来实现
2、Lambda 表达式(component.java_se.jdk1_8.new_features_2)
    --只需要给静态方法 Collections.sort 传入一个List对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给sort方法。
    --在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式
3、函数式接口(component.java_se.jdk1_8.new_features_3)
    --Lambda表达式是如何在java的类型系统中表示的呢？每一个lambda表达式都对应一个类型，通常是接口类型。而“函数式接口”是指仅仅只包含一个抽象方法的接口，每一个该类型的lambda表达式都会被匹配到这个抽象方法。因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。
    --我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，你只需要给你的接口添加 @FunctionalInterface 注解，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的。
4、方法与构造函数引用(component.java_se.jdk1_8.new_features_4)

4、Lambda 作用域(component.java_se.jdk1_8.new_features_5)
    --在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。

5、访问局部变量(component.java_se.jdk1_8.new_features_6)

6、访问局部变量(component.java_se.jdk1_8.new_features_7)

7、访问对象字段与静态变量(component.java_se.jdk1_8.new_features_8)

8、访问接口的默认方法(component.java_se.jdk1_8.new_features_9)

9、Date API新特性(component.java_se.jdk1_8.new_features_10)
    --Clock 时钟
        Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 System.currentTimeMillis() 来获取当前的微秒数。某一个特定的时间点也可以使用Instant类来表示，Instant类也可以用来创建老的java.util.Date对象。
    --Timezones 时区
      在新API中时区使用ZoneId来表示。时区可以很方便的使用静态方法of来获取到。 时区定义了到UTS时间的时间差，在Instant时间点对象到本地日期对象之间转换的时候是极其重要的。
    --LocalTime 本地时间
      LocalTime 定义了一个没有时区信息的时间，例如 晚上10点，或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差
    --LocalDate 本地日期
      LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。
    --LocalDateTime 本地日期时间
      LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime和LocalTime还有LocalDate一样，都是不可变的。LocalDateTime提供了一些能访问具体字段的方法。

