<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <context:component-scan base-package="com.concurrency.activemq.topic"/>

    <bean id="consumerConnectionFactory"
          class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://127.0.0.1:61616)"/>
        <property name="useAsyncSend" value="true"/>
        <property name="clientID" value="consumerClienctConnect"/>
    </bean>

    <!-- 定义消息队列（Queue） -->
    <bean id="demoTopicDestination"
          class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg>
            <!-- 设置消息队列的名字 -->
            <value>jianjun.topic.demo</value>
        </constructor-arg>
    </bean>

    <bean id="demoTopicDestinationA"
          class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg>
            <!-- 设置消息队列的名字 -->
            <value>jianjun.topic.demoA</value>
        </constructor-arg>
    </bean>

    <!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
    <bean id="jmsTemplate_"
          class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="consumerConnectionFactory"/>
        <property name="defaultDestination" ref="demoTopicDestinationA"/>
        <property name="receiveTimeout" value="10000"/>
        <!-- true是topic，false是queue，默认是false，此处显示写出false -->
        <property name="pubSubDomain" value="true"/>
        <property name="explicitQosEnabled" value="true"/>
        <!-- 发送模式
            DeliveryMode.NON_PERSISTENT=1:非持久 ;
            DeliveryMode.PERSISTENT=2:持久
       -->
        <property name="deliveryMode" value="1"/>
    </bean>

    <!--监听消息类-->
    <bean id="topicMessageListener"
          class="com.concurrency.activemq.topic.TopicMessageListener"/>

    <!--监听容器-->
    <bean id="consumeListenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="consumerConnectionFactory"/>
        <property name="destination" ref="demoTopicDestination"/>
        <property name="messageListener" ref="topicMessageListener"/>
        <property name="pubSubDomain" value="true"/>
        <property name="subscriptionDurable" value="true"/>
        <!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
        <property name="clientId" value="consumerClient1"/>
        <!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
        <property name="sessionAcknowledgeMode" value="1"/>
    </bean>

    <bean id="consumeListenerContainerA"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="consumerConnectionFactory"/>
        <property name="destination" ref="demoTopicDestinationA"/>
        <property name="messageListener" ref="topicMessageListener"/>
        <property name="pubSubDomain" value="true"/>
        <property name="subscriptionDurable" value="true"/>
        <!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
        <property name="clientId" value="consumerClient2"/>
        <!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
        <property name="sessionAcknowledgeMode" value="1"/>
    </bean>
</beans>